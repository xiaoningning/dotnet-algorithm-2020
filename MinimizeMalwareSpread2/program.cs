public class Solution {
    public int MinMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.Length;
        // key: node value: connected init infected node
        var m = new Dictionary<int, List<int>>();
        // BFS
        foreach (var i in initial) {
            var infected = new HashSet<int>(initial);
            var q = new Queue<int>();
            q.Enqueue(i);
            while (q.Any()) {
                var t = q.Dequeue();
                for (int d = 0; d < graph[t].Length; d++) {
                    if (graph[t][d] == 0) continue;
                    if (infected.Contains(d)) continue;
                    infected.Add(d);
                    q.Enqueue(d);
                    if (!m.ContainsKey(d)) m.Add(d, new List<int>());
                    m[d].Add(i);
                }
            }
        }
        var res = new int[n];
        foreach (var k in m.Keys) {
            // only connected by only init infected
            // if connected by >1 init infected, 
            // remove init infect won't help
            if (m[k].Count == 1) res[m[k][0]]++;
        }
        // for no connected case
        if (res.Max() == 0) return initial.Min();
        return Array.IndexOf(res, res.Max());
    }
}
